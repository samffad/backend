<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
  http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
  http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">

<!--   <bean id="springContextUtils" class="org.bupt.profit.util.SpringContextUtils"></bean>
  <bean id="authorityService" class="org.bupt.travel.service.impl.AuthorityServiceImpl"></bean>
 -->
  <!--自动扫描注解类-->
  <context:annotation-config/>
  <!--排除 controller 相关注解-->
  <context:component-scan base-package="org.bupt">
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
  </context:component-scan>

  <!--加载配置文件-->
  <context:property-placeholder file-encoding="UTF-8" ignore-resource-not-found="true"
                                location="classpath*:/config.properties"/>
  <bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
    <property name="locations">
      <list>
        <value>classpath*:config.properties</value>
      </list>
    </property>
  </bean>
    
  <bean id="dataSource" class="net.sf.log4jdbc.sql.jdbcapi.DataSourceSpy">
    <constructor-arg ref="dataSourceTarget"/>
  </bean>

  <!-- mysql数据源 -->
  <bean id="dataSourceTarget" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
    <property name="driverClass" value="${jdbc.travel.driverClass}"/>
    <property name="jdbcUrl" value="${jdbc.travel.jdbcUrl}"/>
    <property name="user" value="${jdbc.travel.user}"/>
    <property name="password" value="${jdbc.travel.password}"/>
    <!-- 等待链接的超时时间 10000ms 超过10s没获取到链接抛出 sqlException-->
    <property name="checkoutTimeout" value="${jdbc.checkoutTimeout}" />
    <!--测试链接时间间隔 秒-->
    <property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"/>
    <!--测试链接语句-->
    <property name="preferredTestQuery" value="${jdbc.preferredTestQuery}"/>
    <!--中断挂起的任务 秒-->
    <property name="maxAdministrativeTaskTime" value="${jdbc.maxAdministrativeTaskTime}"/>
    <property name="numHelperThreads" value="${jdbc.numHelperThreads}"/>
    <!--连接的生存时间 秒-->
    <property name="maxConnectionAge" value="${jdbc.maxConnectionAge}" />
    <!--连接数过多时的空闲时间 必须小于maxIdleTime 用于快速释放链接-->
    <property name="maxIdleTimeExcessConnections" value="${jdbc.maxIdleTimeExcessConnections}" />
    <!--则在close的时候测试连接的有效性-->
    <property name="testConnectionOnCheckin" value="${jdbc.testConnectionOnCheckin}"/>
    <!--在每次getConnection的时测试链接有效性-->
    <property name="testConnectionOnCheckout" value="${jdbc.testConnectionOnCheckout}"/>
    <property name="minPoolSize" value="${jdbc.minPoolSize}" />
    <property name="maxPoolSize" value="${jdbc.maxPoolSize}" />
    <property name="initialPoolSize" value="${jdbc.initialPoolSize}" />
    <property name="maxIdleTime" value="${jdbc.maxIdleTime}" />
    <!-- 每次开启连接数 -->
    <property name="acquireIncrement" value="${jdbc.acquireIncrement}" />
    <!-- 链接重试次数 -->
    <property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}" />
    <!-- 链接重试间隔 -->
    <property name="acquireRetryDelay" value="${jdbc.acquireRetryDelay}" />
  </bean>

  <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="dataSource"/>
  </bean>
  <!-- 使用annotation定义事务 -->
  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>
  <!-- 创建SqlSessionFactory，同时指定数据源 -->
  <bean id="frameworkSqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="mapperLocations"
              value="classpath*:org/bupt/**/mapper/*.xml"/>
    <property name="typeAliasesPackage" value="classpath:org.bupt.**.model"/>
  </bean>
  <!-- 创建sqlSessionTemplate -->

  <bean id="frameworkSqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
    <constructor-arg index="0" ref="frameworkSqlSessionFactory"/>
  </bean>

  <bean id="myBatisBaseDao" class="org.bupt.base.dao.ibatis.impl.MyBatisBaseDaoImpl">
    <property name="sqlSessionFactory" ref="frameworkSqlSessionFactory"/>
    <property name="sqlSessionTemplate" ref="frameworkSqlSessionTemplate"/>
  </bean>

  <!-- 通过扫描的模式，所有的mapper都继承SqlMapper接口的接口 -->

  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="org.bupt"/>
    <property name="markerInterface" value="org.bupt.base.dao.ibatis.BaseMapper"/>
    <property name="sqlSessionFactoryBeanName" value="frameworkSqlSessionFactory"/>
    <property name="sqlSessionTemplateBeanName" value="frameworkSqlSessionTemplate"/>
  </bean>
</beans>
